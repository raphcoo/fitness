{"ast":null,"code":"/**\n * @remix-run/router v1.19.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    let route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass DataWithResponseInit {\n  constructor(data, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data;\n    this.init = init || null;\n  }\n}\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnMissImpl = init.unstable_patchRoutesOnMiss;\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnMissImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  // In SPA apps, if the user provided a patchRoutesOnMiss implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  let initialized;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnMiss` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(m => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(m => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = m => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (typeof m.route.loader === \"function\" && m.route.loader.hydrate === true) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined;\n    };\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = new Set();\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Map of pending patchRoutesOnMiss() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        error,\n        notFoundMatches,\n        route\n      } = handleNavigational404(location.pathname);\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionResult.shortCircuited) {\n        return;\n      }\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n      // Create a GET request for the loaders\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches: updatedMatches || matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let {\n          boundaryId,\n          error\n        } = handleDiscoverRouteError(location.pathname, discoverResult);\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [boundaryId, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          notFoundMatches,\n          error,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [route.id, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches);\n      result = results[0];\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData !== undefined ? {\n          actionData\n        } : {}), {\n          flushSync\n        });\n      }\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let {\n          boundaryId,\n          error\n        } = handleDiscoverRouteError(location.pathname, discoverResult);\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          error,\n          notFoundMatches,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(request, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors).filter(_ref2 => {\n        let [id] = _ref2;\n        return !matchesToLoad.some(m => m.route.id === id);\n      }).forEach(_ref3 => {\n        let [routeId, error] = _ref3;\n        errors = Object.assign(errors || {}, {\n          [routeId]: error\n        });\n      });\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      matches,\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(rf => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return true;\n      }\n      return false;\n    }\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(requestMatches, path, fetchRequest.signal);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let {\n          error\n        } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", fetchRequest, [match], requestMatches);\n    let actionResult = actionResults[0];\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, {\n            fetcherSubmission: submission\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]);\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(revalidationRequest, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, path, fetchRequest.signal);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let {\n          error\n        } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", fetchRequest, [match], matches);\n    let result = results[0];\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(request, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches) {\n    try {\n      let results = await callDataStrategyImpl(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties);\n      return await Promise.all(results.map((result, i) => {\n        if (isRedirectHandlerResult(result)) {\n          let response = result.result;\n          return {\n            type: ResultType.redirect,\n            response: normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath)\n          };\n        }\n        return convertHandlerResultToDataResult(result);\n      }));\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      return matchesToLoad.map(() => ({\n        type: ResultType.error,\n        error: e\n      }));\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    let [loaderResults, ...fetcherResults] = await Promise.all([matchesToLoad.length ? callDataStrategy(\"loader\", request, matchesToLoad, matches) : [], ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        let fetcherRequest = createClientSideRequest(init.history, f.path, f.controller.signal);\n        return callDataStrategy(\"loader\", fetcherRequest, [f.match], f.matches).then(r => r[0]);\n      } else {\n        return Promise.resolve({\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        });\n      }\n    })]);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref4) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref4;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, {\n      pathname\n    });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(routesToUse);\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route,\n      error\n    };\n  }\n  function handleDiscoverRouteError(pathname, discoverResult) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message: discoverResult.error != null && \"message\" in discoverResult.error ? discoverResult.error : String(discoverResult.error)\n      })\n    };\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnMissImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        let leafRoute = matches[matches.length - 1].route;\n        if (leafRoute.path && (leafRoute.path === \"*\" || leafRoute.path.endsWith(\"/*\"))) {\n          // If we matched a splat, it might only be because we haven't yet fetched\n          // the children that would match with a higher score, so let's fetch\n          // around and find out\n          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n    return {\n      active: false,\n      matches: null\n    };\n  }\n  async function discoverRoutes(matches, pathname, signal) {\n    let partialMatches = matches;\n    let route = partialMatches.length > 0 ? partialMatches[partialMatches.length - 1].route : null;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(patchRoutesOnMissImpl, pathname, partialMatches, routesToUse, manifest, mapRouteProperties, pendingPatchRoutes, signal);\n      } catch (e) {\n        return {\n          type: \"error\",\n          error: e,\n          partialMatches\n        };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n      if (signal.aborted) {\n        return {\n          type: \"aborted\"\n        };\n      }\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      let matchedSplat = false;\n      if (newMatches) {\n        let leafRoute = newMatches[newMatches.length - 1].route;\n        if (leafRoute.index) {\n          // If we found an index route, we can stop\n          return {\n            type: \"success\",\n            matches: newMatches\n          };\n        }\n        if (leafRoute.path && leafRoute.path.length > 0) {\n          if (leafRoute.path === \"*\") {\n            // If we found a splat route, we can't be sure there's not a\n            // higher-scoring route down some partial matches trail so we need\n            // to check that out\n            matchedSplat = true;\n          } else {\n            // If we found a non-splat route, we can stop\n            return {\n              type: \"success\",\n              matches: newMatches\n            };\n          }\n        }\n      }\n      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n      // If we are no longer partially matching anything, this was either a\n      // legit splat match above, or it's a 404.  Also avoid loops if the\n      // second pass results in the same partial matches\n      if (!newPartialMatches || partialMatches.map(m => m.route.id).join(\"-\") === newPartialMatches.map(m => m.route.id).join(\"-\")) {\n        return {\n          type: \"success\",\n          matches: matchedSplat ? newMatches : null\n        };\n      }\n      partialMatches = newPartialMatches;\n      route = partialMatches[partialMatches.length - 1].route;\n      if (route.path === \"*\") {\n        // The splat is still our most accurate partial, so run with it\n        return {\n          type: \"success\",\n          matches: partialMatches\n        };\n      }\n    }\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, skipLoaderErrorBubbling === true, null);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      unstable_dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, false, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `HandlerResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isHandlerResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, unstable_dataStrategy);\n      result = results[0];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy) {\n    let results = await callDataStrategyImpl(unstable_dataStrategy || defaultDataStrategy, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext);\n    return await Promise.all(results.map((result, i) => {\n      if (isRedirectHandlerResult(result)) {\n        let response = result.result;\n        // Throw redirects and let the server handle them with an HTTP redirect\n        throw normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n      return convertHandlerResultToDataResult(result);\n    }));\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref5) => {\n        let [name, value] = _ref5;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[0] : undefined;\n  let boundaryMatches = boundaryId ? getLoaderMatchesUntilBoundary(matches, boundaryId) : matches;\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return state.loaderData[route.id] === undefined && (\n      // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Idempotent utility to execute patchRoutesOnMiss() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(patchRoutesOnMissImpl, path, matches, routes, manifest, mapRouteProperties, pendingRouteChildren, signal) {\n  let key = [path, ...matches.map(m => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnMissImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(routeId, children, routes, manifest, mapRouteProperties);\n          }\n        }\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n    if (pending && isPromise(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  if (routeId) {\n    var _route$children;\n    let route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    let dataChildren = convertRoutesToDataRoutes(children, mapRouteProperties, [routeId, \"patch\", String(((_route$children = route.children) == null ? void 0 : _route$children.length) || \"0\")], manifest);\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(children, mapRouteProperties, [\"patch\", String(routesToUse.length || \"0\")], manifest);\n    routesToUse.push(...dataChildren);\n  }\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction defaultDataStrategy(opts) {\n  return Promise.all(opts.matches.map(m => m.resolve()));\n}\nasync function callDataStrategyImpl(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext) {\n  let routeIdsToLoad = matchesToLoad.reduce((acc, m) => acc.add(m.route.id), new Set());\n  let loadedMatches = new Set();\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: matches.map(match => {\n      let shouldLoad = routeIdsToLoad.has(match.route.id);\n      // `resolve` encapsulates the route.lazy, executing the\n      // loader/action, and mapping return values/thrown errors to a\n      // HandlerResult.  Users can pass a callback to take fine-grained control\n      // over the execution of the loader/action\n      let resolve = handlerOverride => {\n        loadedMatches.add(match.route.id);\n        return shouldLoad ? callLoaderOrAction(type, request, match, manifest, mapRouteProperties, handlerOverride, requestContext) : Promise.resolve({\n          type: ResultType.data,\n          result: undefined\n        });\n      };\n      return _extends({}, match, {\n        shouldLoad,\n        resolve\n      });\n    }),\n    request,\n    params: matches[0].params,\n    context: requestContext\n  });\n  // Throw if any loadRoute implementations not called since they are what\n  // ensures a route is fully loaded\n  matches.forEach(m => invariant(loadedMatches.has(m.route.id), \"`match.resolve()` was not called for route id \\\"\" + m.route.id + \"\\\". \" + \"You must call `match.resolve()` on every match passed to \" + \"`dataStrategy` to ensure all routes are properly loaded.\"));\n  // Filter out any middleware-only matches for which we didn't need to run handlers\n  return results.filter((_, i) => routeIdsToLoad.has(matches[i].route.id));\n}\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(type, request, match, manifest, mapRouteProperties, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    // This will never resolve so safe to type it as Promise<HandlerResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n    let handlerPromise;\n    if (handlerOverride) {\n      handlerPromise = handlerOverride(ctx => actualHandler(ctx));\n    } else {\n      handlerPromise = (async () => {\n        try {\n          let val = await actualHandler();\n          return {\n            type: \"data\",\n            result: val\n          };\n        } catch (e) {\n          return {\n            type: \"error\",\n            result: e\n          };\n        }\n      })();\n    }\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // HandlerResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertHandlerResultToDataResult(handlerResult) {\n  let {\n    result,\n    type\n  } = handlerResult;\n  if (isResponse(result)) {\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      var _result$init2;\n      if (result.data instanceof Error) {\n        var _result$init;\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status\n        };\n      }\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(((_result$init2 = result.init) == null ? void 0 : _result$init2.status) || 500, undefined, result.data);\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init3, _result$init4;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init3 = result.init) == null ? void 0 : _result$init3.status,\n      headers: ((_result$init4 = result.init) == null ? void 0 : _result$init4.headers) && new Headers(result.init.headers)\n    };\n  }\n  if (isDataWithResponseInit(result)) {\n    var _result$init5, _result$init6;\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n      headers: (_result$init6 = result.init) != null && _result$init6.headers ? new Headers(result.init.headers) : undefined\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  );\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type,\n    message\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage = \"Unable to match URL \\\"\" + pathname + \"\\\" - the `unstable_patchRoutesOnMiss()` \" + (\"function threw the following error:\\n\" + message);\n    } else if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isPromise(val) {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\nfunction isHandlerResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectHandlerResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDataWithResponseInit, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, replace, resolvePath, resolveTo, stripBasename, data as unstable_data };","map":{"version":3,"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","String","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","DataWithResponseInit","constructor","type","AbortedDeferredError","DeferredData","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","unstable_dataStrategy","defaultDataStrategy","patchRoutesOnMissImpl","unstable_patchRoutesOnMiss","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","fogOfWar","checkFogOfWar","active","initialized","m","lazy","loader","errors","isRouteInitialized","hydrate","findIndex","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","pendingPatchRoutes","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","handleNavigational404","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","actionResult","handleAction","shortCircuited","routeId","isErrorResult","getLoadingNavigation","updatedMatches","handleLoaders","fetcherSubmission","getActionDataForCommit","isFogOfWar","getSubmittingNavigation","discoverResult","discoverRoutes","boundaryId","handleDiscoverRouteError","partialMatches","actionMatch","getTargetMatch","method","results","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","boundaryMatch","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","getUpdatedRevalidatingFetchers","rf","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","fetcherKey","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","revalidatingFetcher","getLoadingFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","detectAndHandle405Error","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","callDataStrategyImpl","all","isRedirectHandlerResult","normalizeRelativeRoutingRedirectResponse","convertHandlerResultToDataResult","currentMatches","fetchersToLoad","fetcherRequest","resolveDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref4","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","fogMatches","leafRoute","isNonHMR","loadLazyRouteChildren","newMatches","matchedSplat","newPartialMatches","_internalSetRoutes","newRoutes","patchRoutes","patchRoutesImpl","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","v7_throwAbortReason","query","_temp3","requestContext","skipLoaderErrorBubbling","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","values","_result$activeDeferre","routeMatch","submit","loadRouteData","isHandlerResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","Location","loaderRequest","Request","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryMatches","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","pendingRouteChildren","pending","patch","isPromise","_route$children","dataChildren","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","routeIdsToLoad","loadedMatches","shouldLoad","handlerOverride","callLoaderOrAction","staticContext","onReject","runHandler","handler","actualHandler","ctx","handlerPromise","val","handlerError","handlerResult","contentType","isDataWithResponseInit","_result$init2","_result$init","isDeferredData","_result$init3","_result$init4","deferred","_result$init5","_result$init6","trimmedMatches","normalizedLocation","protocol","isSameBasename","foundError","newLoaderData","mergedLoaderData","eligibleMatches","reverse","_temp5","errorMessage","signals","isRevalidatingLoader","unwrap","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","setItem","UNSAFE_DeferredData","UNSAFE_ErrorResponseImpl","UNSAFE_convertRouteMatchToUiMatch","UNSAFE_convertRoutesToDataRoutes","UNSAFE_decodePath","UNSAFE_getResolveToMatches","UNSAFE_invariant","UNSAFE_warning","unstable_data"],"sources":["/Users/mathildeanaton/fitness-tracker/node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.19.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    let route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass DataWithResponseInit {\n  constructor(data, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data;\n    this.init = init || null;\n  }\n}\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnMissImpl = init.unstable_patchRoutesOnMiss;\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnMissImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  // In SPA apps, if the user provided a patchRoutesOnMiss implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  let initialized;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnMiss` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(m => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(m => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = m => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (typeof m.route.loader === \"function\" && m.route.loader.hydrate === true) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined;\n    };\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = new Set();\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Map of pending patchRoutesOnMiss() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        error,\n        notFoundMatches,\n        route\n      } = handleNavigational404(location.pathname);\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionResult.shortCircuited) {\n        return;\n      }\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n      // Create a GET request for the loaders\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches: updatedMatches || matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let {\n          boundaryId,\n          error\n        } = handleDiscoverRouteError(location.pathname, discoverResult);\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [boundaryId, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          notFoundMatches,\n          error,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [route.id, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches);\n      result = results[0];\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData !== undefined ? {\n          actionData\n        } : {}), {\n          flushSync\n        });\n      }\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let {\n          boundaryId,\n          error\n        } = handleDiscoverRouteError(location.pathname, discoverResult);\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          error,\n          notFoundMatches,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(request, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors).filter(_ref2 => {\n        let [id] = _ref2;\n        return !matchesToLoad.some(m => m.route.id === id);\n      }).forEach(_ref3 => {\n        let [routeId, error] = _ref3;\n        errors = Object.assign(errors || {}, {\n          [routeId]: error\n        });\n      });\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      matches,\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(rf => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return true;\n      }\n      return false;\n    }\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(requestMatches, path, fetchRequest.signal);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let {\n          error\n        } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", fetchRequest, [match], requestMatches);\n    let actionResult = actionResults[0];\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, {\n            fetcherSubmission: submission\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]);\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(revalidationRequest, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, path, fetchRequest.signal);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let {\n          error\n        } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", fetchRequest, [match], matches);\n    let result = results[0];\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(request, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches) {\n    try {\n      let results = await callDataStrategyImpl(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties);\n      return await Promise.all(results.map((result, i) => {\n        if (isRedirectHandlerResult(result)) {\n          let response = result.result;\n          return {\n            type: ResultType.redirect,\n            response: normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath)\n          };\n        }\n        return convertHandlerResultToDataResult(result);\n      }));\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      return matchesToLoad.map(() => ({\n        type: ResultType.error,\n        error: e\n      }));\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    let [loaderResults, ...fetcherResults] = await Promise.all([matchesToLoad.length ? callDataStrategy(\"loader\", request, matchesToLoad, matches) : [], ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        let fetcherRequest = createClientSideRequest(init.history, f.path, f.controller.signal);\n        return callDataStrategy(\"loader\", fetcherRequest, [f.match], f.matches).then(r => r[0]);\n      } else {\n        return Promise.resolve({\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        });\n      }\n    })]);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref4) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref4;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, {\n      pathname\n    });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(routesToUse);\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route,\n      error\n    };\n  }\n  function handleDiscoverRouteError(pathname, discoverResult) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message: discoverResult.error != null && \"message\" in discoverResult.error ? discoverResult.error : String(discoverResult.error)\n      })\n    };\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnMissImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        let leafRoute = matches[matches.length - 1].route;\n        if (leafRoute.path && (leafRoute.path === \"*\" || leafRoute.path.endsWith(\"/*\"))) {\n          // If we matched a splat, it might only be because we haven't yet fetched\n          // the children that would match with a higher score, so let's fetch\n          // around and find out\n          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n    return {\n      active: false,\n      matches: null\n    };\n  }\n  async function discoverRoutes(matches, pathname, signal) {\n    let partialMatches = matches;\n    let route = partialMatches.length > 0 ? partialMatches[partialMatches.length - 1].route : null;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(patchRoutesOnMissImpl, pathname, partialMatches, routesToUse, manifest, mapRouteProperties, pendingPatchRoutes, signal);\n      } catch (e) {\n        return {\n          type: \"error\",\n          error: e,\n          partialMatches\n        };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n      if (signal.aborted) {\n        return {\n          type: \"aborted\"\n        };\n      }\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      let matchedSplat = false;\n      if (newMatches) {\n        let leafRoute = newMatches[newMatches.length - 1].route;\n        if (leafRoute.index) {\n          // If we found an index route, we can stop\n          return {\n            type: \"success\",\n            matches: newMatches\n          };\n        }\n        if (leafRoute.path && leafRoute.path.length > 0) {\n          if (leafRoute.path === \"*\") {\n            // If we found a splat route, we can't be sure there's not a\n            // higher-scoring route down some partial matches trail so we need\n            // to check that out\n            matchedSplat = true;\n          } else {\n            // If we found a non-splat route, we can stop\n            return {\n              type: \"success\",\n              matches: newMatches\n            };\n          }\n        }\n      }\n      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n      // If we are no longer partially matching anything, this was either a\n      // legit splat match above, or it's a 404.  Also avoid loops if the\n      // second pass results in the same partial matches\n      if (!newPartialMatches || partialMatches.map(m => m.route.id).join(\"-\") === newPartialMatches.map(m => m.route.id).join(\"-\")) {\n        return {\n          type: \"success\",\n          matches: matchedSplat ? newMatches : null\n        };\n      }\n      partialMatches = newPartialMatches;\n      route = partialMatches[partialMatches.length - 1].route;\n      if (route.path === \"*\") {\n        // The splat is still our most accurate partial, so run with it\n        return {\n          type: \"success\",\n          matches: partialMatches\n        };\n      }\n    }\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, skipLoaderErrorBubbling === true, null);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      unstable_dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, false, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `HandlerResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isHandlerResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, unstable_dataStrategy);\n      result = results[0];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy) {\n    let results = await callDataStrategyImpl(unstable_dataStrategy || defaultDataStrategy, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext);\n    return await Promise.all(results.map((result, i) => {\n      if (isRedirectHandlerResult(result)) {\n        let response = result.result;\n        // Throw redirects and let the server handle them with an HTTP redirect\n        throw normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n      return convertHandlerResultToDataResult(result);\n    }));\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref5) => {\n        let [name, value] = _ref5;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[0] : undefined;\n  let boundaryMatches = boundaryId ? getLoaderMatchesUntilBoundary(matches, boundaryId) : matches;\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return state.loaderData[route.id] === undefined && (\n      // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Idempotent utility to execute patchRoutesOnMiss() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(patchRoutesOnMissImpl, path, matches, routes, manifest, mapRouteProperties, pendingRouteChildren, signal) {\n  let key = [path, ...matches.map(m => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnMissImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(routeId, children, routes, manifest, mapRouteProperties);\n          }\n        }\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n    if (pending && isPromise(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  if (routeId) {\n    var _route$children;\n    let route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    let dataChildren = convertRoutesToDataRoutes(children, mapRouteProperties, [routeId, \"patch\", String(((_route$children = route.children) == null ? void 0 : _route$children.length) || \"0\")], manifest);\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(children, mapRouteProperties, [\"patch\", String(routesToUse.length || \"0\")], manifest);\n    routesToUse.push(...dataChildren);\n  }\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction defaultDataStrategy(opts) {\n  return Promise.all(opts.matches.map(m => m.resolve()));\n}\nasync function callDataStrategyImpl(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext) {\n  let routeIdsToLoad = matchesToLoad.reduce((acc, m) => acc.add(m.route.id), new Set());\n  let loadedMatches = new Set();\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: matches.map(match => {\n      let shouldLoad = routeIdsToLoad.has(match.route.id);\n      // `resolve` encapsulates the route.lazy, executing the\n      // loader/action, and mapping return values/thrown errors to a\n      // HandlerResult.  Users can pass a callback to take fine-grained control\n      // over the execution of the loader/action\n      let resolve = handlerOverride => {\n        loadedMatches.add(match.route.id);\n        return shouldLoad ? callLoaderOrAction(type, request, match, manifest, mapRouteProperties, handlerOverride, requestContext) : Promise.resolve({\n          type: ResultType.data,\n          result: undefined\n        });\n      };\n      return _extends({}, match, {\n        shouldLoad,\n        resolve\n      });\n    }),\n    request,\n    params: matches[0].params,\n    context: requestContext\n  });\n  // Throw if any loadRoute implementations not called since they are what\n  // ensures a route is fully loaded\n  matches.forEach(m => invariant(loadedMatches.has(m.route.id), \"`match.resolve()` was not called for route id \\\"\" + m.route.id + \"\\\". \" + \"You must call `match.resolve()` on every match passed to \" + \"`dataStrategy` to ensure all routes are properly loaded.\"));\n  // Filter out any middleware-only matches for which we didn't need to run handlers\n  return results.filter((_, i) => routeIdsToLoad.has(matches[i].route.id));\n}\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(type, request, match, manifest, mapRouteProperties, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    // This will never resolve so safe to type it as Promise<HandlerResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n    let handlerPromise;\n    if (handlerOverride) {\n      handlerPromise = handlerOverride(ctx => actualHandler(ctx));\n    } else {\n      handlerPromise = (async () => {\n        try {\n          let val = await actualHandler();\n          return {\n            type: \"data\",\n            result: val\n          };\n        } catch (e) {\n          return {\n            type: \"error\",\n            result: e\n          };\n        }\n      })();\n    }\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // HandlerResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertHandlerResultToDataResult(handlerResult) {\n  let {\n    result,\n    type\n  } = handlerResult;\n  if (isResponse(result)) {\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      var _result$init2;\n      if (result.data instanceof Error) {\n        var _result$init;\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status\n        };\n      }\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(((_result$init2 = result.init) == null ? void 0 : _result$init2.status) || 500, undefined, result.data);\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init3, _result$init4;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init3 = result.init) == null ? void 0 : _result$init3.status,\n      headers: ((_result$init4 = result.init) == null ? void 0 : _result$init4.headers) && new Headers(result.init.headers)\n    };\n  }\n  if (isDataWithResponseInit(result)) {\n    var _result$init5, _result$init6;\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n      headers: (_result$init6 = result.init) != null && _result$init6.headers ? new Headers(result.init.headers) : undefined\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  );\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type,\n    message\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage = \"Unable to match URL \\\"\" + pathname + \"\\\" - the `unstable_patchRoutesOnMiss()` \" + (\"function threw the following error:\\n\" + message);\n    } else if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isPromise(val) {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\nfunction isHandlerResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectHandlerResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDataWithResponseInit, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, replace, resolvePath, resolveTo, stripBasename, data as unstable_data };\n//# sourceMappingURL=router.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}